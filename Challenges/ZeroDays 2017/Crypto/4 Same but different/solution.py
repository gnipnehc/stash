# https://pequalsnp-team.github.io/writeups/common_modulus

n = 133815372491570366297900608157875605129451130099726630501656508335096917794709398887902145427858844588098486262078202174586114744994706205504487628099423605782388607368339326806463799200768075062010033241931597125768289896156843201410472736359405940530668058144141065029111852189778103092235893866268699104303L
e1 = 65537
e2 = 13333
c1 = 122945068906059094551450512397497502004916484802303756560449055180067114118344634957940286091554168159584438436206545614652780793737266073827904128227568517116822522616680425850290670488286518212359009153884412581086201407457664396228891590049910966188746181950052202997388755299929342320071411482461362855697
c2 = 93987810218163811989829647220960208334487818245287922203746230645389266780821356031451435162162862284907987130079502388358128696118274268080975233032461923255923557037064557172099966632167929642130225977094962075897340672962349203598225461251372768993209026043895792222600303095451833715287883035754050321263

from libnum import *

def common_modulus(e1, e2, c1, c2, N):
    # Extended Euclidean algorithm
    a, b, d = xgcd(e1,e2)
    
    # Invert negative factor
    if b < 0:
        c2 = invmod(c2, N)
        b = -b
    if a < 0:
        c1 = invmod(c1, N)
        a = -a
    
    # Get the message (c1^a * c2^b) % N
    m = (pow(c1,a,N) * pow(c2,b,N)) % N
    return [m, a, b, d]

def pad(m, d, i, N):
    if -d*4*i < 0:
        f = pow(invmod(2, N), d*4*i, N)
    else:
        f = pow(2, -d*4*i, N)
    return m * f % N

m, _, _, _ = common_modulus(e1,e2,c1,c2,n)
print(n2s(m))
